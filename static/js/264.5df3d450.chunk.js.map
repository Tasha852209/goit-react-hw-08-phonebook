{"version":3,"file":"static/js/264.5df3d450.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts.selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/ErrorMessage.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContacts = state => state.contactsStore;\n\nexport const selectItems = createSelector(\n  selectContacts,\n  contactsStore => contactsStore.contacts.items\n);\nexport const selectFilter = createSelector(\n  selectContacts,\n  contactsStore => contactsStore.filter\n);\nexport const selectIsLoading = createSelector(\n  selectContacts,\n  contactsStore => contactsStore.contacts.isLoading\n);\nexport const selectError = createSelector(\n  selectContacts,\n  contactsStore => contactsStore.contacts.error\n);\n\n// Не оптимізовані селектори\n//export const selectItems = state => state.contactsStore.contacts.items\n// export const selectFilter = state => state.contactsStore.filter;\n// export const selectIsLoading = state => state.contactsStore.contacts.isLoading;\n// export const  = state => state.contactsStore.contacts.error;\n","// import { useDispatch, useSelector } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { selectItems } from 'redux/contacts.selectors';\n// import { useState } from 'react';\n// import { selectItems } from 'redux/selectors';\n\n// const INITIAL_FORM_STATE = {\n//   name: '',\n//   phone: '',\n// };\n\nexport const ContactForm = ({ addNewContact }) => {\n  // const [formData, setFormData] = useState(INITIAL_FORM_STATE);\n\n  const contacts = useSelector(selectItems);\n  // const handleChange = ({ target: { name, value } }) => {\n  //   setFormData(prevState => ({ ...prevState, [name]: value }));\n  // };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contactName = e.currentTarget.elements.name.value;\n    const contactPhone = e.currentTarget.elements.number.value;\n\n    const newContact = { name: contactName, number: contactPhone };\n\n    addNewContact(newContact);\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor=\"\">\n        <p>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          // onChange={handleChange}\n          value={contacts.name}\n          required\n        />\n      </label>\n      <label htmlFor=\"\">\n        <p>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          // onChange={handleChange}\n          value={contacts.number}\n          required\n        />\n      </label>\n      <button className={css.formButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonDelete\":\"ContactItem_buttonDelete__icmIc\"};","import css from './ContactItem.module.css';\nexport const ContactItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <li key={id}>\n      <span>{name}:</span>\n      <span> {number}</span>\n      <button\n        className={css.buttonDelete}\n        type=\"button\"\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport css from './ContactList.module.css';\n\nexport const ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={css.list}>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={onDeleteContact}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import React from 'react';\nimport css from './Filter.module.css';\nexport const Filter = ({ value, handleFilterContacts }) => {\n  const handleChange = e => handleFilterContacts(e.target.value);\n  return (\n    <div className={css.filter}>\n      <p>Find contacts by name</p>\n      <input value={value} type=\"text\" onChange={handleChange} />\n    </div>\n  );\n};\n","import { Notify } from 'notiflix';\nimport React from 'react';\n\nconst ErrorMessage = ({ message }) => {\n  return (\n    <div>\n      <p>{Notify.failure(message)}</p>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n  filterContacts,\n} from 'redux/ContactsSlice';\nimport { useEffect } from 'react';\nimport {\n  selectError,\n  selectFilter,\n  selectIsLoading,\n  selectItems,\n} from 'redux/contacts.selectors';\nimport Loader from '../components/Loader';\nimport ErrorMessage from '../components/ErrorMessage';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectItems);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const addNewContact = newContact => {\n    contacts.some(({ name }) => name === newContact.name)\n      ? alert(`${newContact.name} is already in contacts`)\n      : dispatch(addContact(newContact));\n  };\n\n  const handleFilterContacts = filteredValue => {\n    dispatch(filterContacts(filteredValue));\n  };\n\n  const getFilterContacts = () => {\n    const filterlowerCase = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filterlowerCase)\n    );\n  };\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm addNewContact={addNewContact}></ContactForm>\n      <h2>Contacts</h2>\n      <Filter value={filter} handleFilterContacts={handleFilterContacts} />\n      {isLoading && !error && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      <ContactList\n        contacts={getFilterContacts()}\n        onDeleteContact={onDeleteContact}\n      />\n    </div>\n  );\n};\nexport default ContactsPage;\n"],"names":["selectContacts","state","contactsStore","selectItems","createSelector","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","ContactForm","addNewContact","useSelector","className","css","onSubmit","e","preventDefault","contactName","currentTarget","elements","name","value","contactPhone","number","reset","htmlFor","type","required","ContactItem","id","onDeleteContact","onClick","ContactList","map","Filter","handleFilterContacts","onChange","target","message","Notify","dispatch","useDispatch","useEffect","fetchContacts","newContact","some","alert","addContact","filteredValue","filterContacts","Loader","filterlowerCase","toLowerCase","includes","getFilterContacts","contactId","deleteContact"],"sourceRoot":""}