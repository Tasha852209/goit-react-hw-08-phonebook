{"version":3,"file":"static/js/695.775487c5.chunk.js","mappings":"wQAgBaA,IAbaC,EAAAA,EAAAA,IACxB,aADwC,mCAExC,WAAOC,EAAUC,GAAjB,iGAE2BC,EAAAA,EAAAA,IAAaF,GAFxC,cAEUG,EAFV,OAGIC,QAAQC,IAAIF,GAHhB,kBAIWA,GAJX,yDAMWF,EAASK,gBAAgB,KAAMC,UAN1C,yDAFwC,0DAabR,EAAAA,EAAAA,IAC3B,gBAD2C,mCAE3C,WAAOC,EAAUC,GAAjB,iGAE2BO,EAAAA,EAAAA,IAAgBR,GAF3C,cAEUG,EAFV,OAGIC,QAAQC,IAAIF,GAHhB,kBAIWA,GAJX,yDAMWF,EAASK,gBAAgB,KAAMC,UAN1C,yDAF2C,0DAkBvCE,GAAgBC,EAAAA,EAAAA,IAAY,CAChCC,KAAM,OAENC,aARoB,CACpBC,WAAW,EACXC,OAAO,GAQPC,SAAU,CACRC,eADQ,SACOC,EAAOC,GACpBD,EAAME,OAASD,EAAOE,OACvB,GAEHC,cAAe,SAAAC,GAAO,OAAIA,CAAJ,I,GAyCUb,EAAcc,QAAjCP,eAEgBP,EAAce,Q,QC3C7C,EAvCqB,WACnB,OAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAETE,GAAWC,EAAAA,EAAAA,MAMjB,OACE,kBAAMC,SAAUN,GAND,SAAAO,GACfH,EAASjC,EAAcoC,IACvBN,GACD,IAGC,WACE,8BACE,0BAAM,WACN,oCAAWF,EAAS,OAAQ,CAAES,UAAU,KAAxC,IAAiDC,KAAK,UACrDP,EAAOlB,OAAQ,0BAAM,+BAExB,8BACE,0BAAM,YACN,oCAAWe,EAAS,QAAS,CAAES,UAAU,KAAzC,IAAkDC,KAAK,WACtDP,EAAOQ,QAAS,0BAAM,+BAEzB,8BACE,0BAAM,eACN,oCACMX,EAAS,WAAY,CAAES,UAAU,EAAMG,UAAW,KADxD,IAEEF,KAAK,cAENP,EAAOU,WAAY,0BAAM,+BAG5B,mBAAQH,KAAK,SAAb,SAAsB,eAG3B,EC/BD,EARqB,WACnB,OACE,0BACE,SAAC,EAAD,KAGL,C","sources":["redux/AuthSlice.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { requestLogin, requestRegister } from 'services/api';\n\nexport const loginThunk = createAsyncThunk(\n  'auth/login',\n  async (formData, thunkAPI) => {\n    try {\n      const response = await requestLogin(formData);\n      console.log(response);\n      return response;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const registerThunk = createAsyncThunk(\n  'auth/register',\n  async (formData, thunkAPI) => {\n    try {\n      const response = await requestRegister(formData);\n      console.log(response);\n      return response;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nconst INITIAL_STATE = {\n  isLoading: false,\n  error: false,\n};\n\nconst contactsSlice = createSlice({\n  name: 'auth',\n\n  initialState: INITIAL_STATE,\n\n  reducers: {\n    filterContacts(state, action) {\n      state.filter = action.payload;\n    },\n  },\n  extraReducers: builder => builder,\n  //   .addCase(fetchContacts.pending, state => {\n  //     state.contacts.isLoading = true;\n  //     state.contacts.error = null;\n  //   })\n  //   .addCase(fetchContacts.fulfilled, (state, action) => {\n  //     state.contacts.isLoading = false;\n  //     state.contacts.items = action.payload;\n  //   })\n  //   .addCase(fetchContacts.rejected, (state, action) => {\n  //     state.contacts.isLoading = false;\n  //     state.contacts.error = action.payload;\n  //   })\n  //   .addCase(addContact.pending, state => {\n  //     state.contacts.isLoading = true;\n  //     state.contacts.error = null;\n  //   })\n  //   .addCase(addContact.fulfilled, (state, action) => {\n  //     state.contacts.isLoading = false;\n  //     state.contacts.items = [action.payload, ...state.contacts.items];\n  //   })\n  //   .addCase(addContact.rejected, (state, action) => {\n  //     state.contacts.isLoading = false;\n  //     state.contacts.error = action.payload;\n  //   })\n  //   .addCase(deleteContact.pending, state => {\n  //     state.contacts.isLoading = true;\n  //     state.contacts.error = null;\n  //   })\n  //   .addCase(deleteContact.fulfilled, (state, action) => {\n  //     state.contacts.isLoading = false;\n  //     state.contacts.items = state.contacts.items.filter(\n  //       contact => contact.id !== action.payload.id\n  //     );\n  //   })\n  //   .addCase(deleteContact.rejected, (state, action) => {\n  //     state.contacts.isLoading = false;\n  //     state.contacts.error = action.payload;\n  //   }),\n});\n\nexport const { filterContacts } = contactsSlice.actions;\n// Редюсер слайсу\nexport const contactsReducer = contactsSlice.reducer;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/AuthSlice';\n\nconst RegisterForm = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const onSubmit = data => {\n    dispatch(registerThunk(data));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>\n        <span>Name:</span>\n        <input {...register('name', { required: true })} type=\"text\" />\n        {errors.name && <span>This field is required</span>}\n      </label>\n      <label>\n        <span>Email:</span>\n        <input {...register('email', { required: true })} type=\"email\" />\n        {errors.email && <span>This field is required</span>}\n      </label>\n      <label>\n        <span>Password:</span>\n        <input\n          {...register('password', { required: true, minLength: 7 })}\n          type=\"password\"\n        />\n        {errors.password && <span>This field is required</span>}\n      </label>\n\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerThunk","createAsyncThunk","formData","thunkAPI","requestLogin","response","console","log","rejectWithValue","message","requestRegister","contactsSlice","createSlice","name","initialState","isLoading","error","reducers","filterContacts","state","action","filter","payload","extraReducers","builder","actions","reducer","useForm","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","onSubmit","data","required","type","email","minLength","password"],"sourceRoot":""}